security:
    encoders:
        legacy:
            id: 'App\Security\MyCustomPasswordEncoder'
        App\Entity\User:
            algorithm: bcrypt
            migrate_from:
                - legacy           
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        in_memory: { memory: null }
        in_database:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: lazy

            json_login:
                check_path: api_login

            provider: in_database

            form_login:
                login_path: security_login
                check_path: security_login
                csrf_token_generator: security.csrf.token_manager
            
            logout:
                path: security_logout
                target: security_login
            
            remember_me:
                secret:   '%kernel.secret%'

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:      
        - { path: '^/admin', roles: ROLE_ADMIN, requires_channel: '%env(SECURE_SCHEME)%' }
        - { path: '^/coach', roles: ROLE_COACH, requires_channel: '%env(SECURE_SCHEME)%' }
        - { path: '^/', roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: '%env(SECURE_SCHEME)%' }

        
        
